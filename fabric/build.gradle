plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}
//

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {

    // the repository for ImmPtl
    maven { url 'https://jitpack.io' }

// the repository for Cloth Config
    maven { url 'https://maven.shedaniel.me' }

    maven {
        url "https://cursemaven.com"
    }

    maven {
        name = 'Ladysnake Mods'
        url = 'https://maven.ladysnake.org/releases'
    }

    maven {
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }

    maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }

    maven { url "https://maven.shedaniel.me/" }

    maven {
        name = "Mod Menu Maven"
        url = "https://maven.terraformersmc.com/"
    }
}

def generatedResources = project(":forge").file("src/generated/resources")

sourceSets {
    main {
        resources.srcDir generatedResources
    }
}



dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    // Adds a dependency on the base cardinal components module (required by every other module)
    // Replace modImplementation with modApi if you expose components in your own API
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${rootProject.cardinal_version}"
    // Adds a dependency on a specific module
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${rootProject.cardinal_version}"


    // Includes Cardinal Components API as a Jar-in-Jar dependency (optional)
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${rootProject.cardinal_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${rootProject.cardinal_version}"

    modCompileOnly "com.terraformersmc:modmenu:${rootProject.mod_menu_version}"
    modCompileOnly "curse.maven:jei-238222:${rootProject.jei_fabric_version}"
    modImplementation "curse.maven:huge-structure-blocks-474114:4803539"

    // Forge Config API Port
    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${rootProject.forge_config_api_port_version}"
    include "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${rootProject.forge_config_api_port_version}"

    // Immersive Portals Start

    modCompileOnlyApi ("com.github.iPortalTeam.ImmersivePortalsMod:imm_ptl_core:${rootProject.immersive_portals_version}")
    modCompileOnlyApi ("com.github.iPortalTeam.ImmersivePortalsMod:q_misc_util:${rootProject.immersive_portals_version}")
    modCompileOnlyApi ("com.github.iPortalTeam.ImmersivePortalsMod:build:${rootProject.immersive_portals_version}")

    /*  // If working on Immersive Portals, change modCompileOnlyApi to modImplementation for the following two entries, this will enable Immersive Portals in Dev
      modCompileOnlyApi("com.github.iPortalTeam.ImmersivePortalsMod:imm_ptl_core:${rootProject.immersive_portals_version}") {
          exclude(group: "net.fabricmc.fabric-api")
          transitive(false)
      }
      modCompileOnlyApi("com.github.iPortalTeam.ImmersivePortalsMod:q_misc_util:${rootProject.immersive_portals_version}") {
          exclude(group: "net.fabricmc.fabric-api")
          transitive(false)
      }
      //Immersive Portals Dependency, not listed on their repo but required for 1.19+ versions
      modCompileOnlyApi("com.github.LlamaLad7:MixinExtras:${rootProject.mixin_extras_version}") {
          exclude(group: "net.fabricmc.fabric-api")
          transitive(false)
      }
      //Immersive Portals Dependency, not listed on their repo but required for 1.19+ versions
      modCompileOnlyApi("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_fabric_version}") {
          exclude(group: "net.fabricmc.fabric-api")
      }*/

    // Immersive Portals End

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

def resourceTargets = ["fabric.mod.json", "tardis_refined.mixins.json"]
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_id                                : mod_id, mod_name: mod_name, mod_version: mod_version,
                         mod_authors                           : mod_authors, credits: credits, mod_description: mod_description,
                         display_url                           : display_url, logo_file: logo_file,
                         issue_tracker_url                     : issue_tracker_url,
                         // update_json_url: update_json_url,
                         homepage_url                          : homepage_url,
                         license                               : license,
                         fabric_api_version_range              : fabric_api_version_range, fabric_minecraft_version_range: fabric_minecraft_version_range,
                         fabric_loader_version_range           : fabric_loader_version_range,
                         fabric_immersive_portals_version_range: fabric_immersive_portals_version_range
                         //,display_test_type: display_test_type
]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = archives_base_name + "_" + project.name
            from components.java
        }
    }

    repositories {
        maven {
            url = "https://maven.craig.software/snapshots/"
            credentials {
                username = project.findProperty("MAVEN_REPO_USERNAME") ?: System.getenv("MAVEN_REPO_USERNAME") ?: ""
                password = project.findProperty("MAVEN_REPO_PASSWORD") ?: System.getenv("MAVEN_REPO_PASSWORD") ?: ""
            }
        }
    }
}